openapi: 3.0.0
info:
  title: Task Management API
  description: API for managing tasks with JWT authentication
  version: 1.0.0
  contact:
    email: support@taskapi.com

servers:
  - url: http://localhost:5001
    description: Development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    User:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          format: email
          example: john@example.com
        password:
          type: string
          format: password
          example: securePassword123
    
    UserResponse:
      type: object
      properties:
        _id:
          type: string
          example: 60d21b4667d0d8992e610c85
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: john@example.com
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: john@example.com
        password:
          type: string
          format: password
          example: securePassword123
    
    ForgotPasswordRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          example: john@example.com
    
    ResetPasswordRequest:
      type: object
      required:
        - password
      properties:
        password:
          type: string
          format: password
          example: newSecurePassword123
    
    Task:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          example: Complete project documentation
        description:
          type: string
          example: Finish API docs for the task management system
        status:
          type: string
          enum: [pending, in-progress, completed]
          default: pending
          example: pending
        dueDate:
          type: string
          format: date-time
          example: 2025-03-01T00:00:00.000Z
    
    TaskResponse:
      type: object
      properties:
        _id:
          type: string
          example: 60d21b4667d0d8992e610c86
        user:
          type: string
          example: 60d21b4667d0d8992e610c85
        title:
          type: string
          example: Complete project documentation
        description:
          type: string
          example: Finish API docs for the task management system
        status:
          type: string
          enum: [pending, in-progress, completed]
          example: pending
        dueDate:
          type: string
          format: date-time
          example: 2025-03-01T00:00:00.000Z
        createdAt:
          type: string
          format: date-time
          example: 2025-02-20T15:30:00.000Z
    
    Error:
      type: object
      properties:
        message:
          type: string
          example: Error message description

paths:
  /auth/signup:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Creates a new user account and returns JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: User already exists or invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      description: Authenticates user and returns JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: User authenticated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/forgot-password:
    post:
      tags:
        - Authentication
      summary: Forgot password
      description: Initiates password reset process by sending email with reset link
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
      responses:
        '200':
          description: Password reset email sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password reset email sent
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/reset-password/{token}:
    post:
      tags:
        - Authentication
      summary: Reset password
      description: Resets user password using token received via email
      parameters:
        - name: token
          in: path
          required: true
          description: Password reset token
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: Password updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password updated successfully
        '400':
          description: Token invalid or expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tasks:
    post:
      tags:
        - Tasks
      summary: Create new task
      description: Creates a new task for the authenticated user
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '401':
          description: Unauthorized, token missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    get:
      tags:
        - Tasks
      summary: Get all tasks
      description: Retrieves all tasks for the authenticated user
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskResponse'
        '401':
          description: Unauthorized, token missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tasks/{id}:
    get:
      tags:
        - Tasks
      summary: Get task by ID
      description: Retrieves a specific task by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Task ID
          schema:
            type: string
      responses:
        '200':
          description: Task retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '401':
          description: Unauthorized, token missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden, user not authorized to access this task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      tags:
        - Tasks
      summary: Update task
      description: Updates a specific task by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Task ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '401':
          description: Unauthorized, token missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden, user not authorized to modify this task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      tags:
        - Tasks
      summary: Delete task
      description: Deletes a specific task by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Task ID
          schema:
            type: string
      responses:
        '200':
          description: Task deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Task removed
        '401':
          description: Unauthorized, token missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden, user not authorized to delete this task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
